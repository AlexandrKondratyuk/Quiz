{"version":3,"sources":["containers/Quiz/Quiz.css","components/ActiveQuiz/ActiveQuiz.css","components/ActiveQuiz/AnswerItem/AnswerItem.css","hoc/Layout/Layout.css","components/ActiveQuiz/AnswersList/AnswersList.css","hoc/Layout/Layout.js","components/ActiveQuiz/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quiz","QuizWrapper","ActiveQuiz","Question","AnswerItem","success","error","Layout","AnswersList","react_default","a","createElement","className","classes","this","props","children","Component","cls","state","push","join","onClick","onAnswerClick","answer","id","text","answers","map","index","ActiveQuiz_AnswerItem_AnswerItem","key","answerNumber","question","quizLength","ActiveQuiz_AnswersList_AnswersList","activeQuestion","answerState","quiz","rightAnswerId","onAnswerClickHandler","answerId","_this","setState","Object","defineProperty","timeout","window","setTimeout","isQuizFinished","console","log","clearTimeout","length","components_ActiveQuiz_ActiveQuiz","App","hoc_Layout_Layout","containers_Quiz_Quiz","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFACAA,EAAAC,QAAA,CAAkBC,KAAA,oBAAAC,YAAA,6CCAlBH,EAAAC,QAAA,CAAkBG,WAAA,gCAAAC,SAAA,gDCAlBL,EAAAC,QAAA,CAAkBK,WAAA,gCAAAC,QAAA,6BAAAC,MAAA,+CCAlBR,EAAAC,QAAA,CAAkBQ,OAAA,0CCAlBT,EAAAC,QAAA,CAAkBS,YAAA,sOCeHD,mLAXP,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQN,QAEpBE,EAAAC,EAAAC,cAAA,YACKG,KAAKC,MAAMC,kBANXC,qFCiBNb,EAjBI,SAACW,GAChB,IAAMG,EAAO,CAACL,IAAQT,YAMtB,OAJIW,EAAMI,OACND,EAAIE,KAAKP,IAAQE,EAAMI,QAIvBV,EAAAC,EAAAC,cAAA,MACIC,UAAWM,EAAIG,KAAK,KACpBC,QAAS,kBAAMP,EAAMQ,cAAcR,EAAMS,OAAOC,MAE9CV,EAAMS,OAAOE,OCIZlB,EAfK,SAAAO,GAAK,OACrBN,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAQL,aACnBC,EAAAC,EAAAC,cAAA,cAAMI,EAAMY,QAAQC,IAAI,SAACJ,EAAQK,GAC7B,OACIpB,EAAAC,EAAAC,cAACmB,EAAD,CACIC,IAAKF,EACLL,OAAQA,EACRD,cAAiBR,EAAMQ,cACvBJ,MAAOJ,EAAMI,MAAQJ,EAAMI,MAAMK,EAAOC,IAAM,SAN1D,OCkBOvB,EApBI,SAACa,GAAD,OACfN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQX,YACpBO,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAQV,UAClBM,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,cAASI,EAAMiB,aAAf,KADJ,OAEKjB,EAAMkB,UAGXxB,EAAAC,EAAAC,cAAA,iBAASI,EAAMiB,aAAf,SAAmCjB,EAAMmB,WAAzC,MAGJzB,EAAAC,EAAAC,cAACwB,EAAD,CACIhB,MAAOJ,EAAMI,MACbQ,QAASZ,EAAMY,QACfJ,cAAiBR,EAAMQ,kBCiEpBvB,6MA9EXmB,MAAQ,CACJiB,eAAgB,EAChBC,YAAa,KACbC,KAAM,CACF,CACIL,SAAU,sDACVM,cAAe,EACfd,GAAI,EACJE,QAAS,CACL,CAACD,KAAM,aAAcD,GAAI,GACzB,CAACC,KAAM,gBAAiBD,GAAI,GAC5B,CAACC,KAAM,eAAgBD,GAAI,GAC3B,CAACC,KAAM,YAAaD,GAAI,KAGhC,CACIQ,SAAU,4DACVM,cAAe,EACfd,GAAI,EACJE,QAAS,CACL,CAACD,KAAM,MAAOD,GAAI,GAClB,CAACC,KAAM,KAAMD,GAAI,SAMjCe,qBAAuB,SAAAC,GAGnB,GAFiBC,EAAKvB,MAAMmB,KAAKI,EAAKvB,MAAMiB,gBAE/BG,gBAAkBE,EAAU,CACrCC,EAAKC,SAAU,CACXN,YAAYO,OAAAC,EAAA,EAAAD,CAAA,GAAGH,EAAY,aAG/B,IAAMK,EAAUC,OAAOC,WAAW,WAC1BN,EAAKO,iBACLC,QAAQC,IAAI,aAEZT,EAAKC,SAAS,CACVP,eAAgBM,EAAKvB,MAAMiB,eAAiB,EAC5CC,YAAa,OAGzBU,OAAOK,aAAaN,IACjB,UAEHJ,EAAKC,SAAS,CACVN,YAAYO,OAAAC,EAAA,EAAAD,CAAA,GAAGH,EAAY,4FAOnC,OAAO3B,KAAKK,MAAMiB,eAAiB,IAAMtB,KAAKK,MAAMmB,KAAKe,wCAIzD,OACI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQb,MAEpBS,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQZ,aACpBQ,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAC2C,EAAD,CACI3B,QAASb,KAAKK,MAAMmB,KAAKxB,KAAKK,MAAMiB,gBAAgBT,QACpDM,SAAUnB,KAAKK,MAAMmB,KAAKxB,KAAKK,MAAMiB,gBAAgBH,SACrDV,cAAeT,KAAK0B,qBACpBN,WAAYpB,KAAKK,MAAMmB,KAAKe,OAC5BrB,aAAclB,KAAKK,MAAMiB,eAAiB,EAC1CjB,MAAOL,KAAKK,MAAMkB,uBAvEvBpB,aCUJsC,mLARX,OACE9C,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAD,cAJUxC,aCQEyC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b97b14f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz__Quiz--3J8Ip\",\"QuizWrapper\":\"Quiz__QuizWrapper--2cJp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz__ActiveQuiz--1xPLH\",\"Question\":\"ActiveQuiz__Question--2AtZS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem__AnswerItem--FMFZL\",\"success\":\"AnswerItem__success--tAKqq\",\"error\":\"AnswerItem__error--27Deq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout__Layout--2C2_c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList__AnswersList--1WLwo\"};","import React, {Component } from 'react'\nimport classes from './Layout.css'\n\nclass Layout extends Component {\n    render () {\n        return (\n            <div className={classes.Layout}>\n\n                <main>\n                    {this.props.children}\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default Layout","import React from 'react'\nimport classes from './AnswerItem.css'\n\nconst AnswerItem = (props) => {\n    const cls =  [classes.AnswerItem]\n\n    if (props.state) {\n        cls.push(classes[props.state])\n    }\n\n    return (\n        <li\n            className={cls.join(' ')}\n            onClick={() => props.onAnswerClick(props.answer.id) }\n        >\n            { props.answer.text }\n        </li>\n    )\n}\n\nexport default AnswerItem","import React from 'react'\nimport classes from './AnswersList.css'\nimport AnswerItem from '../AnswerItem/AnswerItem'\n\nconst AnswersList = props => (\n    <ul className={classes.AnswersList}>\n        <ul> {props.answers.map((answer, index) => {\n            return (\n                <AnswerItem\n                    key={index}\n                    answer={answer}\n                    onAnswerClick = {props.onAnswerClick}\n                    state={props.state ? props.state[answer.id] : null}\n                />\n            )\n        })} </ul>\n    </ul>\n)\n\nexport default AnswersList","import React from 'react'\nimport classes from './ActiveQuiz.css'\nimport AnswersList from './AnswersList/AnswersList'\n\nconst ActiveQuiz = (props) => (\n    <div className={classes.ActiveQuiz}>\n        <p className={classes.Question}>\n            <span>\n                <strong>{props.answerNumber}.</strong>&nbsp;\n                {props.question}\n            </span>\n\n            <small> {props.answerNumber} from {props.quizLength} </small>\n        </p>\n\n        <AnswersList\n            state={props.state}\n            answers={props.answers}\n            onAnswerClick = {props.onAnswerClick}\n        />\n\n    </div>\n)\n\nexport default ActiveQuiz","import React, {Component} from 'react'\nimport classes from './Quiz.css'\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\n\nclass Quiz extends Component {\n    state = {\n        activeQuestion: 0,\n        answerState: null,    // { [id] : 'success'  or   'error' }\n        quiz: [\n            {\n                question: 'Which function is used to stop a setInterval timer?',\n                rightAnswerId: 2,\n                id: 1,\n                answers: [\n                    {text: 'clearTimer', id: 1},\n                    {text: 'clearInterval', id: 2},\n                    {text: 'stopInterval', id: 3},\n                    {text: 'stopTimer', id: 4}\n                ]\n            },\n            {\n                question: 'Can multiple event handlers be added to a single element?',\n                rightAnswerId: 1,\n                id: 2,\n                answers: [\n                    {text: 'Yes', id: 1},\n                    {text: 'No', id: 2}\n                ]\n            }\n        ]\n    }\n\n    onAnswerClickHandler = answerId => {\n        const question = this.state.quiz[this.state.activeQuestion]\n\n        if (question.rightAnswerId === answerId) {\n            this.setState ({\n                answerState: {[answerId] : 'success'}\n            })\n\n            const timeout = window.setTimeout(() => {\n                if (this.isQuizFinished()) {\n                    console.log('Finished!')\n                } else {\n                    this.setState({\n                        activeQuestion: this.state.activeQuestion + 1,\n                        answerState: null\n                    })\n                }\n            window.clearTimeout(timeout);\n            }, 1000)\n        } else {\n            this.setState({\n                answerState: {[answerId] : 'error'}\n\n            })\n        }\n    }\n\n    isQuizFinished () {\n        return this.state.activeQuestion + 1 === this.state.quiz.length\n    }\n\n    render() {\n        return (\n            <div className={classes.Quiz}>\n\n                <div className={classes.QuizWrapper}>\n                    <h1> Answer the questions </h1>\n                    <ActiveQuiz\n                        answers={this.state.quiz[this.state.activeQuestion].answers}\n                        question={this.state.quiz[this.state.activeQuestion].question}\n                        onAnswerClick={this.onAnswerClickHandler}\n                        quizLength={this.state.quiz.length}\n                        answerNumber={this.state.activeQuestion + 1}\n                        state={this.state.answerState}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Quiz","import React, { Component } from 'react'\nimport Layout from './hoc/Layout/Layout'\nimport Quiz from './containers/Quiz/Quiz'\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <Quiz />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}